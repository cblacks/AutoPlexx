---
# docker-compose -f ~/docker/docker-compose.yml up -d
version: "3.3"
networks:
  internal:
    driver: bridge

services:
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: always
    network_mode: 'bridge'
    # command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${USERDIR}/docker/portainer/data:/data
      - '/etc/localtime:/etc/localtime:ro'
    ports:
      - "9000:9000"
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}

  plexms:
    container_name: plexms
    restart: always
    image: plexinc/pms-docker:plexpass
    volumes:
      - ${USERDIR}/docker/plexms:/config
      - ${USERDIR}/Downloads/plex_tmp:/transcode
      - /media/media:/media
      - ${USERDIR}/docker/certs:/certs
      # ADD ADDITIONAL HARD DRIVE MOUNT POINTS HERE
    network_mode: host
    environment:
      - TZ=${TZ}
      - HOSTNAME=${PLEX_HOSTNAME}
      - PLEX_CLAIM=${PLEX_CLAIM}
      - PLEX_UID=${PUID}
      - PLEX_GID=${PGID}
      - ADVERTISE_IP=${PLEX_ADVERTISE_IP}

  tautulli:
    image: ghcr.io/linuxserver/tautulli:latest
    container_name: tautulli
    restart: always
    volumes:
      - ${USERDIR}/docker/plexpy:/config
      - /var/log/plexpy:/logs:ro
      - ${USERDIR}/docker/certs:/certs
    ports:
      - "8181:8181"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}

  watchtower:
    container_name: watchtower
    restart: always
    image: v2tec/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 4 * * *" --cleanup

  transmission-vpn:
    container_name: transmission-vpn
    image: haugene/transmission-openvpn
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    restart: always
    ports:
    - "9091:9091"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${USERDIR}/docker/transmission-vpn:/data
      - ${USERDIR}/docker/certs:/certs
      - ${USERDIR}/Downloads:/data/watch
      - ${USERDIR}/Downloads/completed:/data/completed
      - ${USERDIR}/Downloads/incomplete:/data/incomplete
    environment:
      - OPENVPN_PROVIDER=${OPENVPN_PROVIDER}
      - OPENVPN_USERNAME=${OPENVPN_USERNAME}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
      - OPENVPN_CONFIG=${OPENVPN_CONFIG} #optional line
      - OPENVPN_OPTS=--inactive 3600 --ping 10 --ping-exit 60 --mute-replay-warnings
      - LOCAL_NETWORK=192.168.86.0/24
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - TRANSMISSION_RPC_AUTHENTICATION_REQUIRED=true
      - TRANSMISSION_RPC_HOST_WHITELIST="127.0.0.*,192.168.*.*"
      - TRANSMISSION_PASSWORD=${TRANSMISSION_PASSWORD}
      - TRANSMISSION_USERNAME=${TRANSMISSION_USERNAME}
      - TRANSMISSION_UMASK=2
      - TRANSMISSION_RATIO_LIMIT_ENABLED=true
      - TRANSMISSION_RATIO_LIMIT=0
      # - ENABLE_UFW=true

  ## uncomment if you want to use lidarr (for downloading music)
  # lidarr:
  #   image: linuxserver/lidarr:latest
  #   container_name: "lidarr"
  #   volumes:
  #     - ${USERDIR}/docker/lidarr:/config
  #     - "/etc/localtime:/etc/localtime:ro"
  #     - ${USERDIR}/docker/certs:/certs
  ##    ADD ADDITIONAL HARD DRIVE MOUNT POINTS HERE
  #   restart: always
  #   ports:
  #     - "8686:8686"
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}

  jackett:
    image: "linuxserver/jackett"
    container_name: "jackett"
    volumes:
      - ${USERDIR}/docker/jackett:/config
      - "/etc/localtime:/etc/localtime:ro"
      - ${USERDIR}/docker/certs:/certs
    ports:
      - "9117:9117"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}

  sonarr:
    # build: /etc/environment
    #image: linuxserver/sonarr:latest
    image: mdhiggins/sonarr-sma
    container_name: "sonarr"
    volumes:
      - /opt/appdata/sma:/usr/local/sma/config
      - ${USERDIR}/docker/sonarr:/config
      - ${USERDIR}/Downloads/completed:/data/completed
      - ${USERDIR}/Downloads/completed/recyclingBin:/data/completed/recyclingBin
      - "/etc/localtime:/etc/localtime:ro"
      - ${USERDIR}/docker/certs:/certs
      # ADD ADDITIONAL HARD DRIVE MOUNT POINTS HERE
    ports:
        - "8989:8989"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}

  radarr:
    # build: /etc/environment
    #image: linuxserver/radarr:latest
    image: mdhiggins/radarr-sma
    container_name: "radarr"
    volumes:
      - /opt/appdata/sma:/usr/local/sma/config
      - ${USERDIR}/docker/radarr:/config
      - ${USERDIR}/media/movies:/movies
      - "/etc/localtime:/etc/localtime:ro"
      - ${USERDIR}/docker/certs:/certs
      - ${USERDIR}/Downloads/completed:/data/completed
      - ${USERDIR}/Downloads/completed/recyclingBin:/data/completed/recyclingBin
      # ADD ADDITIONAL HARD DRIVE MOUNT POINTS HERE
    ports:
      - "7878:7878"
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}

  influxdb:
    image: influxdb:2.1.1
    volumes:
      - influxdb-storage:/var/lib/influxdb2:rw
    env_file:
      - .env
    entrypoint: ["./entrypoint.sh"]
    restart: on-failure:10
    ports:
      - ${DOCKER_INFLUXDB_INIT_PORT}:8086

  telegraf:
    image: telegraf:1.19
    volumes:
      - ${TELEGRAF_CFG_PATH}:/etc/telegraf/telegraf.conf:rw
      # ADD ADDITIONAL HARD DRIVE MOUNT POINTS HERE
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - influxdb

  grafana:
    image: grafana/grafana-oss:latest
    volumes:
      - grafana-storage:/var/lib/grafana:rw
    depends_on:
      - influxdb
    restart: unless-stopped
    ports:
      - ${GRAFANA_PORT}:3000
  
  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/bazarr/config:/config
      # ADD ADDITIONAL HARD DRIVE MOUNT POINTS HERE
    ports:
      - 6767:6767
    restart: unless-stopped

  netdata:
    image: netdata/netdata
    container_name: netdata2
    ports:
      - 19999:19999
    restart: unless-stopped
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - netdataconfig:/etc/netdata
      - netdatalib:/var/lib/netdata
      - netdatacache:/var/cache/netdata
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /etc/os-release:/host/etc/os-release:ro
  
  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/overseer/config:/config
    ports:
      - 5055:5055
    restart: unless-stopped

  plex-meta-manager:
    image: lscr.io/linuxserver/plex-meta-manager:latest
    container_name: plex-meta-manager
    environment:
      - PMM_CONFIG=/config/config.yml #optional
      - PMM_TIME=03:00 #optional
      - PMM_RUN=False #optional
      - PMM_TEST=False #optional
      - PMM_NO_MISSING=False #optional
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/plex-meta-manager/config:/config
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:v2.21.0
    ports:
      - 9090:9090
    restart: unless-stopped
    volumes:
      - ${USERDIR}/docker/prometheus:/prometheus
    command: --web.enable-lifecycle  --config.file=/prometheus/prometheus.yml
  
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/prowlarr:/config
    ports:
      - 9696:9696
    restart: unless-stopped

  requestrr:
    image: darkalfx/requestrr
    hostname: requestrr
    container_name: requestrr
    ports:
      - 4545:4545
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${USERDIR}/docker/requestrr/config:/root/config
    restart: unless-stopped

volumes:
  netdataconfig:
  netdatalib:
  netdatacache:
  grafana-storage:
  influxdb-storage:
  prometheus-data:
